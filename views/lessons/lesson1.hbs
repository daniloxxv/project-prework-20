<section class="learning">
  <div id="commentable-container" class="container commentable-container col-md-6">
    <h1 class="title">
      Lesson 1: What is a Distributed Version Control?
    </h1>

    <div class="row">

      <cite class="sublead">
        A Distributed Version Control System (DVCS) is a system that records changes to a set of files over time so
        you can recall specific versions later.
      </cite>

    </div>

    <div class="row">
      <p data-section-id="1" class="commentable-section">
        <strong>In software development, distributed version control (also known as distributed revision control) is a
          form of version control where the complete codebase - including its full history - is mirrored on every
          developer's computer.</strong> This allows branching and merging to be managed automatically, increases speeds
        of most operations (except for pushing and pulling), improves the ability to work offline, and does not rely on
        a
        single location for backups.
      </p>
    </div>

    <div class="row">
      <p data-section-id="2" class="commentable-section">
        Distributed revision control systems (DVCS) takes a peer-to-peer approach to version control, as opposed to the
        clientâ€“server approach of centralized systems. Distributed revision control synchronizes repositories by
        exchanging patches from peer to peer. <strong>There is no single central version of the codebase; instead, each
          user has a working copy and the full change history.</strong>
      </p>
    </div>


    <div class="row">
      <div class="col-xs-12 col-sm-12 col-md-6 col-lg-12">
        <img src="https://i.imgur.com/7c6ss6v.jpg" alt="" class="lessonpic img-fluid">
      </div>
    </div>



    <div class="row">


      <p data-section-id="3" class="commentable-section">
        The distributed model is generally better suited for large projects with partly independent developers, such as
        the Linux kernel project, because developers can work independently and submit their changes for merge (or
        rejection). The distributed model flexibly allows adopting custom source code contribution workflows.
        <strong>The
          integrator workflow is the most widely used.</strong> In the centralized model, developers must serialize
        their
        work, to avoid problems with different versions.
      </p>
    </div>


    <div class="row">
      <p data-section-id="4" class="commentable-section">
        <strong>GitHub is a web-based hosting service for version control using Git.</strong> It is mostly used for
        computer code. It offers all of the distributed version control and source code management (SCM) functionality
        of
        Git as well as adding its own features.
        <small class="form-text text-muted">Text from Wikipedia.com</small>
      </p>
    </div>



    {{!-- This is the handlebar helper that we registered--}} {{assign 'existingComments' this.data.coment}}

    <div class="quiz form-group">
      <h3 class="quiztitle">Quiz 1: Hello, GitHub!</h3>
      <form action="/quiz1" method="post" class="form-inline">
        <label for="quiz1">It's time to set up your first GitHub repository. Open a GitHub account and create a new
          repository with a simple "Hello World" JavaScript application. Paste the URL for your repository here.</label>
        <input type="text" name="quiz1" id="quiz1" class="form-control quizinput">
        <input id='submitquiz1' type="submit" value="Submit" class="btn btn-success quizinput">
      </form>
      <small id="quiz1helper" class="form-text text-muted">{{{successMessage}}}</small>
    </div>
  </div>
</section>

</div>



<script src="https://code.jquery.com/jquery-3.3.1.min.js"
  integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=" crossorigin="anonymous"></script>
<script src="/javascripts/side-comments.js"></script>
<script src="/javascripts/test_data.js"></script>
<script type="text/javascript">

  //Existing comments
  var existingComments = [{{{@root.existingComments}}}];

  //Construimos el objeto del usuario actual
  var currentUsera = {
    id: `{{this.data.user.id}}`,
    avatarUrl: `{{this.data.user.avatarUrl}}`,
    authorUrl: `{{this.data.user.authorUrl}}`,
    name: `{{this.data.user.username}}`
  };
</script>
<script src="/javascripts/learning.js"></script>
<script src="/javascripts/quiz.js"></script>